<!DOCTYPE html>
<html>

<body>
	<h1>nBody Result Visulizer</h1>
	<canvas id="myCanvas" width="500" height="500" style="border:1px solid #c3c3c3;">
		Your browser does not support the canvas element.
	</canvas>
	<br />
	Center X Coor: <input type="number" id="centerX" value="0.0" onchange="minPoint[0]=this.value">
	<br />
	Center Y Coor: <input type="number" id="centerY" value="0.0" onchange="minPoint[1]=this.value">
	<br />
	Range Width: <input type="number" id="rangeSize" value="100.0" onchange="rangeSize=this.value">
	<br />
	Data (result.json):
	<input id="file" type="file" />
	<br />
	<button onclick="Update()">Animation</button>
	<button onclick="++session;document.getElementById('status').value='Stopped'">Stop</button>
	<br />
	<input type="text" id="status" readonly/>
	<h2>Usage:</h2>
	<p>Please click "choose file" button to load result file generated by nbody program</p>
	<p>After selecting file, click "Animation" button, the webpage will draw planets on canvas step by step.</p>
	<p>You can click on canvas, to change the center point.</p>

	<script>
		var canvas, ctx, session, status, space;
		document.onreadystatechange = () => {
			canvas = document.getElementById("myCanvas");
			ctx = canvas.getContext("2d");
			session = 0;
			ctx.fillStyle = "#FF0000";
            centerPoint = [0.0, 0.0]
			rangeSize = 100.0
            canvas.addEventListener('click', (e) => {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                getUpdateCenterLocation(x,y);
            });
		}
        // Convert space based on centerPoint and rangeSize to canvas space
		function spaceConvert(point) {
            // Set new coor to minX, minY
			var newCoor = [
                centerPoint[0]-rangeSize/2,
                centerPoint[1]-rangeSize/2
            ];
            // Caculate new coordinate based on canvas size
			newCoor[0] = (point.x - newCoor[0]) / rangeSize * canvas.width;
			newCoor[1] = (point.y - newCoor[1]) / rangeSize * canvas.height;
			return newCoor;
		}
        // Convert space back to point space
        function inverseSpaceConvert(point) {
			var newCoor = [
                centerPoint[0]-rangeSize/2,
                centerPoint[1]-rangeSize/2
            ];
            
			newCoor[0] = point.x / canvas.width * rangeSize + newCoor[0];
			newCoor[1] = point.y / canvas.width * rangeSize + newCoor[1];
			return newCoor;
		}

        // Update center point by clicking on graph
        function getUpdateCenterLocation(x, y) {
            centerPoint = inverseSpaceConvert({
                "x":x,
                "y":y
            });
            document.getElementById("centerX").value = centerPoint[0];
            document.getElementById("centerY").value = centerPoint[1];
        }
		
        // Draw points on canvas for one iteration
        // i indicates the number of iteration
		function Draw(datas, i, id) {
            // Parase json for current iteration
            var currentData;
            try {
                currentData = JSON.parse(datas[i])
            } catch (e) {
                console.error(e)
                return
            }
            var iter = datas.length

            // Check if we should terminate
			if (id != session)
				return;
			if (i == iter) {
				document.getElementById('status').value = "Stopped";
				return;
			}
            // Draw all planets
			ctx.clearRect(0, 0, canvas.width, canvas.height);
            var nParticle = currentData.planets.length
			for (j = 0; j < nParticle; ++j) {
				var coor = currentData.planets[j].location;
				coor = spaceConvert(coor);
				ctx.fillRect(coor[0], coor[1], 2, 2);
			}
            // Draw time stamp
            ctx.fillText("Time: "+currentData.timestamp, 10, 10);
            // Draw next iteration after 300 ms
			setTimeout(() => {
				Draw(datas, i + 1, id);
			}, 300);
		}

        // Update web page by loading file
		function Update() {
            // Load files
			const file = document.getElementById('file').files[0];
			document.getElementById('status').value = "Loadding File";
            // Check if file has been defined
			if (file) {
				const reader = new FileReader();
				reader.readAsText(file); // Read file to string
				reader.onload = () => { // Call back after data is ready
					++session; // Increase session id (For stoping last session draw)
					document.getElementById('status').value = "Loadding Data";
					var text = reader.result; // store file to text
					text = text.split("\n"); // Get result line by line
					document.getElementById('status').value = "Playing";
                    // Start Drawing points
					Draw(text, 0, session);
				}
				reader.onerror = (e) => {
					document.getElementById('status').value = "Loading Error";
				}
			} else {
                document.getElementById('status').value = "Loading Error";
            }

		}
	</script>

</body>

</html>